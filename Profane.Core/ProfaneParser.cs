//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Profane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ProfaneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DERP=1, ID=2, ASSIGN=3, COMMA=4, SMILEY=5, NUMBER=6, STRING=7;
	public const int
		RULE_compilation_unit = 0, RULE_statement = 1, RULE_assign_statement = 2, 
		RULE_invoke_statement = 3, RULE_expr = 4;
	public static readonly string[] ruleNames = {
		"compilation_unit", "statement", "assign_statement", "invoke_statement", 
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'derp'", null, "'='", "','", "':)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DERP", "ID", "ASSIGN", "COMMA", "SMILEY", "NUMBER", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Profane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ProfaneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProfaneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProfaneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Compilation_unitContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DERP || _la==ID) {
				{
				{
				State = 10; statement();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		public Invoke_statementContext invoke_statement() {
			return GetRuleContext<Invoke_statementContext>(0);
		}
		public ITerminalNode SMILEY() { return GetToken(ProfaneParser.SMILEY, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DERP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; assign_statement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; invoke_statement();
				State = 18; Match(SMILEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statementContext : ParserRuleContext {
		public ITerminalNode DERP() { return GetToken(ProfaneParser.DERP, 0); }
		public ITerminalNode ID() { return GetToken(ProfaneParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(ProfaneParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterAssign_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitAssign_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_statementContext assign_statement() {
		Assign_statementContext _localctx = new Assign_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(DERP);
			State = 23; Match(ID);
			State = 24; Match(ASSIGN);
			State = 25; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoke_statementContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode ID() { return GetToken(ProfaneParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ProfaneParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ProfaneParser.COMMA, i);
		}
		public Invoke_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterInvoke_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitInvoke_statement(this);
		}
	}

	[RuleVersion(0)]
	public Invoke_statementContext invoke_statement() {
		Invoke_statementContext _localctx = new Invoke_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_invoke_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; _localctx.name = Match(ID);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 28; expr();
						State = 29; Match(COMMA);
						}
						} 
					}
					State = 35;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 36; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProfaneParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(ProfaneParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(ProfaneParser.STRING, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', ',', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x17', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\"', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '%', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'(', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', 
		'\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x3', '\x4', '\x2', '\x4', 
		'\x4', '\b', '\t', '\x2', '*', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x16', '\x3', '\x2', '\x2', '\x2', '\x6', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x1D', '\x3', '\x2', '\x2', '\x2', '\n', ')', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x17', '\x5', '\x6', '\x4', '\x2', 
		'\x13', '\x14', '\x5', '\b', '\x5', '\x2', '\x14', '\x15', '\a', '\a', 
		'\x2', '\x2', '\x15', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\x3', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '\x4', '\x2', '\x2', '\x1A', '\x1B', 
		'\a', '\x5', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\n', '\x6', '\x2', 
		'\x1C', '\a', '\x3', '\x2', '\x2', '\x2', '\x1D', '\'', '\a', '\x4', '\x2', 
		'\x2', '\x1E', '\x1F', '\x5', '\n', '\x6', '\x2', '\x1F', ' ', '\a', '\x6', 
		'\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', 
		'&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', '(', '\x5', '\n', '\x6', '\x2', '\'', '#', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\t', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\t', '\x2', '\x2', '\x2', '*', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xF', '\x16', '#', '\'',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
