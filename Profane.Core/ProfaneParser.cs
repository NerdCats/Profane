//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Profane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ProfaneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, ID=3, SMILEY=4, WS=5, PLUS=6, EQUAL=7, ASSIGN=8, NOTEQUAL=9, 
		MINUS=10, NUMBER=11, STRING=12;
	public const int
		RULE_compilationUnit = 0, RULE_statement = 1, RULE_printstmt = 2, RULE_assignstmt = 3, 
		RULE_expr = 4, RULE_opExpression = 5, RULE_op = 6, RULE_term = 7, RULE_number = 8;
	public static readonly string[] ruleNames = {
		"compilationUnit", "statement", "printstmt", "assignstmt", "expr", "opExpression", 
		"op", "term", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'dump'", "'derp'", null, "':)'", null, "'+'", "'=='", "'='", "'!='", 
		"'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ID", "SMILEY", "WS", "PLUS", "EQUAL", "ASSIGN", "NOTEQUAL", 
		"MINUS", "NUMBER", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Profane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ProfaneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProfaneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProfaneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ProfaneParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__1) {
				{
				{
				State = 18; statement();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		public AssignstmtContext assignstmt() {
			return GetRuleContext<AssignstmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; printstmt();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; assignstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		public ITerminalNode SMILEY() { return GetToken(ProfaneParser.SMILEY, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_printstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(T__0);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 31; expr();
				}
			}

			State = 34; Match(SMILEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProfaneParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(ProfaneParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SMILEY() { return GetToken(ProfaneParser.SMILEY, 0); }
		public AssignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterAssignstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitAssignstmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignstmtContext assignstmt() {
		AssignstmtContext _localctx = new AssignstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__1);
			State = 37; Match(ID);
			State = 38; Match(ASSIGN);
			State = 39; expr();
			State = 40; Match(SMILEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public OpExpressionContext opExpression() {
			return GetRuleContext<OpExpressionContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; opExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpExpressionContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public OpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitOpExpression(this);
		}
	}

	[RuleVersion(0)]
	public OpExpressionContext opExpression() {
		OpExpressionContext _localctx = new OpExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_opExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; term();
			State = 47; op();
			State = 48; term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(ProfaneParser.PLUS, 0); }
		public ITerminalNode EQUAL() { return GetToken(ProfaneParser.EQUAL, 0); }
		public ITerminalNode ASSIGN() { return GetToken(ProfaneParser.ASSIGN, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(ProfaneParser.NOTEQUAL, 0); }
		public ITerminalNode MINUS() { return GetToken(ProfaneParser.MINUS, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 12, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << EQUAL) | (1L << ASSIGN) | (1L << NOTEQUAL) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ProfaneParser.ID, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(ProfaneParser.STRING, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 14, RULE_term);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; Match(ID);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; number();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ProfaneParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IProfaneListener typedListener = listener as IProfaneListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x1F', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '#', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', ':', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x2', '\x3', '\x3', '\x2', '\b', '\f', '\x2', ':', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', 
		'\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x34', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x12', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x2', '\x2', '\x3', '\x1B', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x5', '\x6', '\x4', 
		'\x2', '\x1D', '\x1F', '\x5', '\b', '\x5', '\x2', '\x1E', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x5', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\a', '\x3', '\x2', '\x2', 
		'!', '#', '\x5', '\n', '\x6', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\a', '\x6', '\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '\x4', '\x2', '\x2', '\'', '(', '\a', '\x5', '\x2', 
		'\x2', '(', ')', '\a', '\n', '\x2', '\x2', ')', '*', '\x5', '\n', '\x6', 
		'\x2', '*', '+', '\a', '\x6', '\x2', '\x2', '+', '\t', '\x3', '\x2', '\x2', 
		'\x2', ',', '/', '\x5', '\x10', '\t', '\x2', '-', '/', '\x5', '\f', '\a', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\v', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x10', 
		'\t', '\x2', '\x31', '\x32', '\x5', '\xE', '\b', '\x2', '\x32', '\x33', 
		'\x5', '\x10', '\t', '\x2', '\x33', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\t', '\x2', '\x2', '\x2', '\x35', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x36', ':', '\a', '\x5', '\x2', '\x2', '\x37', ':', '\x5', 
		'\x12', '\n', '\x2', '\x38', ':', '\a', '\xE', '\x2', '\x2', '\x39', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x11', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\r', '\x2', '\x2', '<', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x17', '\x1E', '\"', '.', '\x39',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
