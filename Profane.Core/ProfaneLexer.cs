//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Profane.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ProfaneLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, ID=6, SMILEY=7, WS=8, PLUS=9, 
		EQUAL=10, ASSIGN=11, NOTEQUAL=12, MINUS=13, GT=14, LT=15, GTEQ=16, LTEQ=17, 
		NUMBER=18, STRING=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "ID", "SMILEY", "WS", "PLUS", 
		"EQUAL", "ASSIGN", "NOTEQUAL", "MINUS", "GT", "LT", "GTEQ", "LTEQ", "INT", 
		"NUMBER", "STRING"
	};


	public ProfaneLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ProfaneLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'dump'", "'derp'", "'???'", "'yep ->'", "'kbye'", null, "':)'", 
		null, "'+'", "'===='", "'='", "'!!=='", "'-'", "'>'", "'<'", "'>='", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "ID", "SMILEY", "WS", "PLUS", "EQUAL", 
		"ASSIGN", "NOTEQUAL", "MINUS", "GT", "LT", "GTEQ", "LTEQ", "NUMBER", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Profane.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ProfaneLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', '\x85', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', 'H', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'K', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x6', '\t', 'Q', '\n', '\t', '\r', '\t', '\xE', '\t', 'R', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x6', '\x13', 'r', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', 's', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', 'y', '\n', '\x14', '\x5', '\x14', '{', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x7F', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x82', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x2', 
		'\x2', '\x16', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', 
		'!', '\x12', '#', '\x13', '%', '\x2', '\'', '\x14', ')', '\x15', '\x3', 
		'\x2', '\a', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x32', 
		';', '\x4', '\x2', '\f', '\f', '$', '$', '\x2', '\x89', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x3', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x30', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\t', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\v', '@', '\x3', '\x2', '\x2', '\x2', '\r', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\xF', 'L', '\x3', '\x2', '\x2', '\x2', '\x11', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x13', 'V', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'X', '\x3', '\x2', '\x2', '\x2', '\x17', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '_', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x66', '\x3', '\x2', '\x2', '\x2', '\x1F', 'h', 
		'\x3', '\x2', '\x2', '\x2', '!', 'j', '\x3', '\x2', '\x2', '\x2', '#', 
		'm', '\x3', '\x2', '\x2', '\x2', '%', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\'', 'u', '\x3', '\x2', '\x2', '\x2', ')', '|', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '\x66', '\x2', '\x2', ',', '-', '\a', 'w', '\x2', 
		'\x2', '-', '.', '\a', 'o', '\x2', '\x2', '.', '/', '\a', 'r', '\x2', 
		'\x2', '/', '\x4', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x66', 
		'\x2', '\x2', '\x31', '\x32', '\a', 'g', '\x2', '\x2', '\x32', '\x33', 
		'\a', 't', '\x2', '\x2', '\x33', '\x34', '\a', 'r', '\x2', '\x2', '\x34', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x41', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x41', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x41', '\x2', '\x2', '\x38', '\b', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', '{', '\x2', '\x2', ':', ';', '\a', 'g', '\x2', '\x2', ';', 
		'<', '\a', 'r', '\x2', '\x2', '<', '=', '\a', '\"', '\x2', '\x2', '=', 
		'>', '\a', '/', '\x2', '\x2', '>', '?', '\a', '@', '\x2', '\x2', '?', 
		'\n', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 'm', '\x2', '\x2', 
		'\x41', '\x42', '\a', '\x64', '\x2', '\x2', '\x42', '\x43', '\a', '{', 
		'\x2', '\x2', '\x43', '\x44', '\a', 'g', '\x2', '\x2', '\x44', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'I', '\t', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\t', '\x3', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\xE', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '<', '\x2', 
		'\x2', 'M', 'N', '\a', '+', '\x2', '\x2', 'N', '\x10', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\t', '\x4', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\b', '\t', '\x2', '\x2', 'U', '\x12', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\a', '-', '\x2', '\x2', 'W', '\x14', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '?', '\x2', '\x2', 'Y', 'Z', '\a', '?', 
		'\x2', '\x2', 'Z', '[', '\a', '?', '\x2', '\x2', '[', '\\', '\a', '?', 
		'\x2', '\x2', '\\', '\x16', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'?', '\x2', '\x2', '^', '\x18', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '#', '\x2', '\x2', '`', '\x61', '\a', '#', '\x2', '\x2', '\x61', 
		'\x62', '\a', '?', '\x2', '\x2', '\x62', '\x63', '\a', '?', '\x2', '\x2', 
		'\x63', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '/', 
		'\x2', '\x2', '\x65', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\a', '@', '\x2', '\x2', 'g', '\x1E', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\a', '>', '\x2', '\x2', 'i', ' ', '\x3', '\x2', '\x2', '\x2', 'j', 
		'k', '\a', '@', '\x2', '\x2', 'k', 'l', '\a', '?', '\x2', '\x2', 'l', 
		'\"', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '>', '\x2', '\x2', 'n', 
		'o', '\a', '?', '\x2', '\x2', 'o', '$', '\x3', '\x2', '\x2', '\x2', 'p', 
		'r', '\t', '\x5', '\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', '&', '\x3', '\x2', '\x2', '\x2', 
		'u', 'z', '\x5', '%', '\x13', '\x2', 'v', 'x', '\a', '\x30', '\x2', '\x2', 
		'w', 'y', '\x5', '%', '\x13', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 
		'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '(', '\x3', '\x2', '\x2', '\x2', '|', '\x80', '\a', '$', '\x2', '\x2', 
		'}', '\x7F', '\n', '\x6', '\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '$', '\x2', '\x2', '\x84', '*', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x2', 'I', 'R', 's', 'x', 'z', '\x80', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
